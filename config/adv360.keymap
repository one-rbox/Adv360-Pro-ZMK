
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
#define BASE 0
#define QWERTY 1
#define KEYPAD 2
#define FN 3
#define APPS 4
#define MOD 5
#define NAV 6


#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer
#define NAV_E &tog_key NAV E

#define MEH(key) LS(LC(LA(key)))

#define HYP(key) LS(LC(LA(LG(key))))
#define HYPER    LS(LC(LA(LGUI)))

#include <behaviors.dtsi>
#include "combos.dtsi"  // must be sourced after layer-shortcuts
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    tapping-term-ms = <210>;
    flavor = "tap-preferred";
    quick_tap_ms = <200>;
};

&lt {
    quick_tap_ms = <200>;
};

&mmv {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <250>;
};

&mwh {
    time-to-max-speed-ms = <250>;
    acceleration-exponent = <1>;
};

/ {
  behaviors {
    #include "macros.dtsi"

		pd3: prog_dvorak_rcurly_three_def {
			compatible = "zmk,behavior-mod-morph";
			label = "pd3";
			mods = <(MOD_LSFT|MOD_RSFT)>;
			#masked_mods = <(MOD_LSFT|MOD_RSFT)>;
			#binding-cells = <0>;
			bindings = <&kp RBRC>, <&kp N3>;
		};

		comma_inner_morph: comma_inner_morph {
			compatible = "zmk,behavior-mod-morph";
			label = "cim";
			#binding-cells = <0>;
			bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
    	mods = <(MOD_LCTL|MOD_RCTL)>;
		};

		comma_morph: comma_morph_def {
			compatible = "zmk,behavior-mod-morph";
			label = "cm";
			mods = <(MOD_LSFT|MOD_RSFT)>;
			#binding-cells = <0>;
			bindings = <&kp COMMA>, <&comma_inner_morph>;
		};

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

		mo_tog: behavior_mo_tog {
				compatible = "zmk,behavior-hold-tap";
				label = "mo_tog";
				#binding-cells = <2>;
				flavor = "hold-preferred";
				tapping-term-ms = <200>;
				bindings = <&mo>, <&tog>;
			};

		tog_key: behavior_tog_key {
				compatible = "zmk,behavior-hold-tap";
				label = "tog_key";
				#binding-cells = <2>;
				flavor = "hold-preferred";
				tapping-term-ms = <200>;
				bindings = <&tog>, <&kp>;
			};

	 td_nav_e: tap_dance_0 {
				compatible = "zmk,behavior-tap-dance";
				label = "TAP_DANCE_NAV";
				#binding-cells = <0>;
				tapping-term-ms = <200>;
				bindings = <&mt NAV E>, <NAV_E>;
		};

		td_vimac_help: td_vimac_help {
				compatible = "zmk,behavior-tap-dance";
				label = "TAP_DANCE_VIMMAC_HELP";
				#binding-cells = <0>;
				tapping-term-ms = <200>;
				bindings = <&mt HYPER LG(LC(H))>, <&kp LG(LS(SLASH))>;
		};
	};

keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
     &kp GRAVE          &kp N1      &kp N2          &kp N3     &kp N4  &kp N5        &tog 1                                                                         &kp LA(PRINTSCREEN)  &kp N6   &kp N7          &kp N8    &kp N9    &kp N0      &kp MINUS
       &kp TAB           &kp Q       &kp W           &kp E      &kp R   &kp T  &kp LS(HOME)                                                                                 &kp LS(END)   &kp Y    &kp U           &kp I     &kp O     &kp P      &kp EQUAL
 &mt LCTRL ESC           &kp A       &kp S           &kp D      &kp F   &kp G   &kp LA(F11)  &mt LEFT_ALT LA(TAB)   &kp LCTRL                   &kp LGUI   &kp BSPC         &kp LA(F12)   &kp H    &kp J           &kp K     &kp L  &kp SEMI        &kp SQT
     &kp LSHFT           &kp Z       &kp X           &kp C      &kp V   &kp B         &none                 &none    &kp HOME   &none   &none  &kp PG_UP      &none               &none   &kp N    &kp M       &kp COMMA   &kp DOT  &kp FSLH      &kp RSHFT
     &kp LG(S)  &kp LS(INSERT)  &kp C_MENU       &mkp LCLK  &mkp RCLK                 &mo 2      &mt LSHIFT SPACE     &kp END                  &kp PG_DN  &kp ENTER    &mt LSHIFT SPACE          &kp F14  &kp LANGUAGE_1  &kp LBKT  &kp RBKT  &kp BACKSLASH
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5              &trans                                                                 &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T               &none                                                                 &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G               &none  &kp LCTRL  &kp LALT                   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B               &none      &none  &kp HOME   &none   &none  &kp PG_UP      &none      &none   &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT                    &kp BSPC    &kp DEL   &kp END                  &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &trans    &kp F1   &kp F2           &kp F3            &kp F4            &kp F5             &mo 3                                                  &trans          &kp F6          &kp F7        &kp F8           &kp F9        &kp F10    &kp F11
 &trans    &trans   &trans          &kp END    &mwh SCROLL_UP            &trans             &none                                                   &none          &trans     &kp PAGE_UP        &trans           &trans   &kp UP_ARROW    &kp F12
 &trans  &kp HOME   &trans    &kp PAGE_DOWN         &mkp LCLK         &mkp RCLK             &none  &trans  &trans                  &trans  &trans   &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp LS(GRAVE)  &kp GRAVE
 &trans    &trans  &kp DEL &mwh SCROLL_LEFT  &mwh SCROLL_DOWN &mwh SCROLL_RIGHT             &none   &none  &trans   &none   &none  &trans   &none   &none  &kp DOWN_ARROW          &trans        &trans           &trans         &trans     &trans
 &trans    &trans   &trans           &trans            &trans                              &trans  &trans  &trans                  &trans  &trans  &trans                          &trans        &trans           &trans         &trans     &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                             &none                                                                              &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &none
  &none         &none         &none         &none         &none         &none                       &bootloader                                                                         &bootloader         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none            &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR   &none                  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5         &none         &none         &none         &none         &none   &none
  &none         &none         &none         &none         &none         &none                             &none       &none   &none   &none   &none       &none       &none                   &none         &none         &none         &none         &none         &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC                                 &rgb_ug RGB_TOG  &bl BL_TOG   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG                  &bl BL_INC    &bl BL_DEC         &none         &none   &none
            >;

		};
	};
};
